Requirements
============
 - Python 2.6
 - Scipy
 - Numpy
 - matplotlib
 - pyttk

Creating a source distribution:
Change the version number in setup.py and changes.txt

python setup.py register sdist bdist_egg upload

Notes on Python Paths
=====================

Inside the scipysim "core" all imports should be directed down to avoid cyclic
dependancies. This means that all of the python files in core should reference
each other explicitly by location. For example in the actor.py file it requires
access to the exceptions stored in errors.py, instead of going:
    from scipysim.core.errors import X
instead the import should simply be
    from errors import X

For general models or parts of the system not part of core this is not required.
We can assume that all modules are being launched with the full scipysim package
in the searchpath.

Notes for future work
=====================

* Auto generated API docs and doc tests.

* A dependancy graph could be useful - http://www.tarind.com/depgraph.html

* GUI
    A model can be created in pure Python code - see all the early examples.
    Alternatively a simulation can be created with an xml model - this version can 
    be displayed with the GUI program which follows simple rules to make the model python file
    and then run it.
    The Python standard library has an XML module. The Ptolemy project has created a markup language
    that MAY be useful. Although this means parsing and writing xml code for just some models?
    I would still like the system to work independent of how the model is created.


    Another approach (or at least a complimentary approach) would be to use code introspection, so a python
    file exists for any actor (weather it is composed of others or not) and the GUI program 
    determines when the model is being created (component connection time) if it allowed to 
    connect to another component based on the actual code. It then creates a real python 
    file containing the model (temporary until saved).

    There should be a shared GUI module, then sub modules with specific implementation details
    eg options for the gui like Tkinter, QT, canvas, flash, silverlight

* Syntax Highlighter - If pygments is available we could use that.

Backend System

- A model system that automatically adds all connected components into a Model which can be "Run"
 
 Actors
 
- A few string processing blocks:
     open file (outputs a stream)
     read line from stream (outputs a string)
     split line into string tokens
     parse a string token into a number

- Actors that use "bundles" eg a dft.

Other Simulators...     
http://www.idsia.ch/~andrea/sim/simtools.html
