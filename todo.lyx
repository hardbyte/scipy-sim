#LyX 1.6.4 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble

\end_preamble
\use_default_options true
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Simulation in SciPy Project
\end_layout

\begin_layout Author
Brian Thorne
\end_layout

\begin_layout Itemize
Decide how to deal with different domains of computation - maybe the signals
 need tagged with DE, DT, CT etc...
\end_layout

\begin_layout Itemize
learn a bit more Haskel so I fully understand code in Actors without directors
 paper
\end_layout

\begin_layout Itemize
make UNIT tests for all Actors thus far
\end_layout

\begin_layout Itemize
look at PRET and PRET-C (from AU)
\end_layout

\begin_layout Itemize
look at esterel and micro threading and coroutines - options for Python
 include twisted, multitask and stackless python.
\end_layout

\begin_layout Itemize
look at reactive functional programming/thunk space/deferred computation
 (pypy)
\end_layout

\begin_layout Itemize
model checking for time analysis - UPPAAC, TFSM, TCCFG
\end_layout

\begin_layout Itemize
Read these papers
\end_layout

\begin_deeper
\begin_layout Itemize
Benveniste '03
\end_layout

\begin_layout Itemize
Computing Needs Time '09 (Ed Lee)
\end_layout

\begin_layout Itemize
Actors without Directors (Ed Lee)
\end_layout

\begin_layout Itemize
A framework for comparing models of computation (Ed Lee)
\end_layout

\begin_layout Itemize
Classes and Inheritance in Actor-Oriented Design (Ed Lee)
\end_layout

\begin_layout Itemize
Overview of Ptolemy project (Ed Lee)
\end_layout

\begin_layout Itemize

\emph on
operational semantics
\emph default
 of hybrid systems
\end_layout

\begin_layout Itemize
taming heterogeneity - ptolemy approach (Ed Lee)
\end_layout

\begin_layout Itemize
modeling timed concurrent systems (Ed Lee)
\end_layout

\begin_layout Itemize
MACs '91
\end_layout

\begin_layout Itemize
Krike Structure RTSS '03
\end_layout

\begin_layout Itemize
A survey of stream processing - Stephens
\end_layout

\begin_layout Itemize
Actor model and process calculi - Wiki
\end_layout

\begin_layout Itemize
N-Synchronous Kahn Networks - A Relaxed Model of Synchrony for Real-Time
 Systems
\end_layout

\end_deeper
\begin_layout Itemize
read and write intro to ptolemy project
\end_layout

\begin_layout Itemize
Implement a sampler to go from Continous Time to Discrete Time
\end_layout

\begin_layout Itemize
Implement an interpolater to go from Discrete Time to Continous Time
\end_layout

\begin_layout Itemize
write a derivative block
\end_layout

\begin_layout Itemize
write an integration block
\end_layout

\begin_layout Itemize
write a higher level abstraction for a 
\begin_inset Quotes eld
\end_inset

model
\begin_inset Quotes erd
\end_inset

 - including running time etc
\end_layout

\begin_layout Itemize
investigate and implement a way to KILL a running simulation (Should be
 easy as injecting 
\begin_inset Quotes eld
\end_inset

None
\begin_inset Quotes erd
\end_inset

 into every queue)
\end_layout

\begin_layout Itemize
Implement a frequency probe
\end_layout

\begin_layout Itemize
Start planning the GUI
\end_layout

\begin_layout Itemize
Different domains
\end_layout

\begin_deeper
\begin_layout Itemize
Boolean - flip flops, XOR etc
\end_layout

\begin_layout Itemize
Discrete - stem graph plotter
\end_layout

\begin_layout Itemize
Continuous 
\end_layout

\end_deeper
\begin_layout Section*
Example Model:
\end_layout

\begin_layout Standard
\begin_inset Formula $\xymatrix{ &  & Ramp\, Source\ar[dr]\\
Start &  & Random\, Source\ar[r] & SumBlock\ar[r] & Plotter &  & Complete\\
 &  & Ramp\, Source\ar[ur]}
$
\end_inset


\end_layout

\end_body
\end_document
